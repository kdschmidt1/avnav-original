"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var fs = require("fs");
var path = require("path");
function generate(options) {
    return new GenerateFileWebpackPlugin(options);
}
var GenerateFileWebpackPlugin = /** @class */ (function () {
    function GenerateFileWebpackPlugin(options) {
        this.options = options;
        this.name = 'GenerateFileWebpackPlugin';
        this.debug(null, '[created]');
    }
    // noinspection JSUnusedGlobalSymbols
    GenerateFileWebpackPlugin.prototype.apply = function (compiler) {
        var _this = this;
        this.debug(null, '[called]');
        compiler.hooks.emit.tapAsync(this.name, function (compilation, callback) {
            _this.debug(compilation, '[emit.tapAsync]');
            try {
                var targetFile_1 = _this.inferTargetFile(compilation);
                _this.debug(compilation, '[generating]', targetFile_1);
                _this.resolveContent()
                    .then(function (content) {
                    var targetDir = path.dirname(targetFile_1);
                    if (!fs.existsSync(targetDir)) {
                        fs.mkdirSync(targetDir, { recursive: true });
                    }
                    fs.writeFileSync(targetFile_1, content);
                    _this.info(compilation, '[generated]', targetFile_1);
                    callback();
                })
                    .catch(function (e) {
                    _this.fail(compilation, e, targetFile_1);
                    callback();
                });
            }
            catch (e) {
                _this.fail(compilation, e);
                callback();
            }
        });
    };
    GenerateFileWebpackPlugin.prototype.inferTargetFile = function (compilation) {
        if (path.isAbsolute(this.options.file)) {
            return this.options.file;
        }
        if (!compilation.compiler.outputPath) {
            // This should never occur in real-life - we catch that case anyways, just because of paranoia
            throw new Error('Could not infer target file path: No webpack output path configured.');
        }
        var outputPath = compilation.compiler.outputPath;
        if (!path.isAbsolute(outputPath)) {
            // This should never occur in real-life - we catch that case anyways, just because of paranoia
            throw new Error('Could not infer target file path: Configured webpack output path is not an absolute path.');
        }
        return path.resolve(outputPath, this.options.file);
    };
    GenerateFileWebpackPlugin.prototype.resolveContent = function () {
        return __awaiter(this, void 0, void 0, function () {
            var contentSource, functionResult;
            return __generator(this, function (_a) {
                contentSource = this.options.content;
                if (isString(contentSource)) {
                    return [2 /*return*/, contentSource];
                }
                else if (isBuffer(contentSource)) {
                    return [2 /*return*/, contentSource.toString()];
                }
                else if (isPromise(contentSource)) {
                    return [2 /*return*/, contentSource];
                }
                else if (isFunction(contentSource)) {
                    functionResult = contentSource.call();
                    if (!isString(functionResult) && !isBuffer(functionResult) && !isPromise(functionResult)) {
                        throw new Error('Unsupported function content source: ' + typeNameOf(functionResult));
                    }
                    return [2 /*return*/, functionResult];
                }
                else {
                    throw new Error('Unsupported content source: ' + typeNameOf(contentSource));
                }
                return [2 /*return*/];
            });
        });
    };
    GenerateFileWebpackPlugin.prototype.fail = function (compilation, e, targetFile) {
        var errorMessage = e instanceof Error ? e.message : e.toString();
        var message = '[' + this.name + '] ';
        if (targetFile) {
            message = message + '[' + path.basename(targetFile) + '] ';
        }
        message = message + errorMessage;
        compilation.errors.push(new Error(message));
    };
    GenerateFileWebpackPlugin.prototype.debug = function (compilation, logMessage, targetFile) {
        if (!this.options.debug) {
            return;
        }
        this.getLogger(compilation).info(this.message(logMessage, targetFile));
    };
    GenerateFileWebpackPlugin.prototype.info = function (compilation, logMessage, targetFile) {
        this.getLogger(compilation).info(this.message(logMessage, targetFile));
    };
    GenerateFileWebpackPlugin.prototype.getLogger = function (compilation) {
        return compilation && compilation.getLogger ? compilation.getLogger(this.name) : console;
    };
    GenerateFileWebpackPlugin.prototype.message = function (logMessage, targetFile) {
        var message = '[' + this.name + '] ';
        if (targetFile) {
            message = message + '[' + path.basename(targetFile) + '] ';
        }
        message = message + logMessage;
        return message;
    };
    return GenerateFileWebpackPlugin;
}());
function isString(value) {
    return typeof value === 'string' || value instanceof String;
}
function isBuffer(value) {
    return typeof value === 'object' && Buffer.isBuffer(value);
}
function isPromise(value) {
    return typeof value === 'object' && value instanceof Promise;
}
function isFunction(value) {
    return typeof value === 'function';
}
function typeNameOf(value) {
    if (typeof value === 'object') {
        return value.constructor.name;
    }
    else {
        return typeof value;
    }
}
module.exports = generate;
